#if UNITY_EDITOR
using System;
using System.Collections.Generic;
using UnityEngine;

namespace SimpleAndLazy.Editor
{
    //https://en.wikipedia.org/wiki/ANSI_escape_code#cite_note-xtc-30
    internal static class XtermColor
    {
        public static readonly Color DefaultColor = new Color(0.8f, 0.8f, 0.8f);
        private static readonly Color LittleBright = new Color(0.3f, 0.3f, 0.3f);
        private static readonly Color BrightRed = AddColor(Color.red, LittleBright);
        private static readonly Color BrightGreen = AddColor(Color.green, LittleBright);
        private static readonly Color BrightYellow = AddColor(Color.yellow, LittleBright);
        private static readonly Color BrightBlue = AddColor(Color.blue, LittleBright);
        private static readonly Color BrightMagneta = AddColor(Color.magenta, LittleBright);
        private static readonly Color BrightCyan = AddColor(Color.cyan, LittleBright);

        private static readonly Dictionary<int, Color> dict3or4bitforeground = new Dictionary<int, Color>
        {
            {0, DefaultColor},
            {30, Color.black},
            {31, Color.red},
            {32, Color.green},
            {33, Color.yellow},
            {34, Color.blue},
            {35, Color.magenta},
            {36, Color.cyan},
            {37, DefaultColor},
            {39, DefaultColor},
            {90, Color.gray},
            {91, BrightRed},
            {92, BrightGreen},
            {93, BrightYellow},
            {94, BrightBlue},
            {95, BrightMagneta},
            {96, BrightCyan},
            {97, Color.white},
        };

        private static readonly Dictionary<int, Color> dict8bitforeground = new Dictionary<int, Color>
        {
            {0, new Color32(0x00, 0x00, 0x00, 0xff)},
            {1, new Color32(0x80, 0x00, 0x00, 0xff)},
            {2, new Color32(0x00, 0x80, 0x00, 0xff)},
            {3, new Color32(0x80, 0x80, 0x00, 0xff)},
            {4, new Color32(0x00, 0x00, 0x80, 0xff)},
            {5, new Color32(0x80, 0x00, 0x80, 0xff)},
            {6, new Color32(0x00, 0x80, 0x80, 0xff)},
            {7, new Color32(0xc0, 0xc0, 0xc0, 0xff)},
            {8, new Color32(0x80, 0x80, 0x80, 0xff)},
            {9, new Color32(0xff, 0x00, 0x00, 0xff)},
            {10, new Color32(0x00, 0xff, 0x00, 0xff)},
            {11, new Color32(0xff, 0xff, 0x00, 0xff)},
            {12, new Color32(0x00, 0x00, 0xff, 0xff)},
            {13, new Color32(0xff, 0x00, 0xff, 0xff)},
            {14, new Color32(0x00, 0xff, 0xff, 0xff)},
            {15, new Color32(0xff, 0xff, 0xff, 0xff)},
            {16, new Color32(0x00, 0x00, 0x00, 0xff)},
            {17, new Color32(0x00, 0x00, 0x5f, 0xff)},
            {18, new Color32(0x00, 0x00, 0x87, 0xff)},
            {19, new Color32(0x00, 0x00, 0xaf, 0xff)},
            {20, new Color32(0x00, 0x00, 0xd7, 0xff)},
            {21, new Color32(0x00, 0x00, 0xff, 0xff)},
            {22, new Color32(0x00, 0x5f, 0x00, 0xff)},
            {23, new Color32(0x00, 0x5f, 0x5f, 0xff)},
            {24, new Color32(0x00, 0x5f, 0x87, 0xff)},
            {25, new Color32(0x00, 0x5f, 0xaf, 0xff)},
            {26, new Color32(0x00, 0x5f, 0xd7, 0xff)},
            {27, new Color32(0x00, 0x5f, 0xff, 0xff)},
            {28, new Color32(0x00, 0x87, 0x00, 0xff)},
            {29, new Color32(0x00, 0x87, 0x5f, 0xff)},
            {30, new Color32(0x00, 0x87, 0x87, 0xff)},
            {31, new Color32(0x00, 0x87, 0xaf, 0xff)},
            {32, new Color32(0x00, 0x87, 0xd7, 0xff)},
            {33, new Color32(0x00, 0x87, 0xff, 0xff)},
            {34, new Color32(0x00, 0xaf, 0x00, 0xff)},
            {35, new Color32(0x00, 0xaf, 0x5f, 0xff)},
            {36, new Color32(0x00, 0xaf, 0x87, 0xff)},
            {37, new Color32(0x00, 0xaf, 0xaf, 0xff)},
            {38, new Color32(0x00, 0xaf, 0xd7, 0xff)},
            {39, new Color32(0x00, 0xaf, 0xff, 0xff)},
            {40, new Color32(0x00, 0xd7, 0x00, 0xff)},
            {41, new Color32(0x00, 0xd7, 0x5f, 0xff)},
            {42, new Color32(0x00, 0xd7, 0x87, 0xff)},
            {43, new Color32(0x00, 0xd7, 0xaf, 0xff)},
            {44, new Color32(0x00, 0xd7, 0xd7, 0xff)},
            {45, new Color32(0x00, 0xd7, 0xff, 0xff)},
            {46, new Color32(0x00, 0xff, 0x00, 0xff)},
            {47, new Color32(0x00, 0xff, 0x5f, 0xff)},
            {48, new Color32(0x00, 0xff, 0x87, 0xff)},
            {49, new Color32(0x00, 0xff, 0xaf, 0xff)},
            {50, new Color32(0x00, 0xff, 0xd7, 0xff)},
            {51, new Color32(0x00, 0xff, 0xff, 0xff)},
            {52, new Color32(0x5f, 0x00, 0x00, 0xff)},
            {53, new Color32(0x5f, 0x00, 0x5f, 0xff)},
            {54, new Color32(0x5f, 0x00, 0x87, 0xff)},
            {55, new Color32(0x5f, 0x00, 0xaf, 0xff)},
            {56, new Color32(0x5f, 0x00, 0xd7, 0xff)},
            {57, new Color32(0x5f, 0x00, 0xff, 0xff)},
            {58, new Color32(0x5f, 0x5f, 0x00, 0xff)},
            {59, new Color32(0x5f, 0x5f, 0x5f, 0xff)},
            {60, new Color32(0x5f, 0x5f, 0x87, 0xff)},
            {61, new Color32(0x5f, 0x5f, 0xaf, 0xff)},
            {62, new Color32(0x5f, 0x5f, 0xd7, 0xff)},
            {63, new Color32(0x5f, 0x5f, 0xff, 0xff)},
            {64, new Color32(0x5f, 0x87, 0x00, 0xff)},
            {65, new Color32(0x5f, 0x87, 0x5f, 0xff)},
            {66, new Color32(0x5f, 0x87, 0x87, 0xff)},
            {67, new Color32(0x5f, 0x87, 0xaf, 0xff)},
            {68, new Color32(0x5f, 0x87, 0xd7, 0xff)},
            {69, new Color32(0x5f, 0x87, 0xff, 0xff)},
            {70, new Color32(0x5f, 0xaf, 0x00, 0xff)},
            {71, new Color32(0x5f, 0xaf, 0x5f, 0xff)},
            {72, new Color32(0x5f, 0xaf, 0x87, 0xff)},
            {73, new Color32(0x5f, 0xaf, 0xaf, 0xff)},
            {74, new Color32(0x5f, 0xaf, 0xd7, 0xff)},
            {75, new Color32(0x5f, 0xaf, 0xff, 0xff)},
            {76, new Color32(0x5f, 0xd7, 0x00, 0xff)},
            {77, new Color32(0x5f, 0xd7, 0x5f, 0xff)},
            {78, new Color32(0x5f, 0xd7, 0x87, 0xff)},
            {79, new Color32(0x5f, 0xd7, 0xaf, 0xff)},
            {80, new Color32(0x5f, 0xd7, 0xd7, 0xff)},
            {81, new Color32(0x5f, 0xd7, 0xff, 0xff)},
            {82, new Color32(0x5f, 0xff, 0x00, 0xff)},
            {83, new Color32(0x5f, 0xff, 0x5f, 0xff)},
            {84, new Color32(0x5f, 0xff, 0x87, 0xff)},
            {85, new Color32(0x5f, 0xff, 0xaf, 0xff)},
            {86, new Color32(0x5f, 0xff, 0xd7, 0xff)},
            {87, new Color32(0x5f, 0xff, 0xff, 0xff)},
            {88, new Color32(0x87, 0x00, 0x00, 0xff)},
            {89, new Color32(0x87, 0x00, 0x5f, 0xff)},
            {90, new Color32(0x87, 0x00, 0x87, 0xff)},
            {91, new Color32(0x87, 0x00, 0xaf, 0xff)},
            {92, new Color32(0x87, 0x00, 0xd7, 0xff)},
            {93, new Color32(0x87, 0x00, 0xff, 0xff)},
            {94, new Color32(0x87, 0x5f, 0x00, 0xff)},
            {95, new Color32(0x87, 0x5f, 0x5f, 0xff)},
            {96, new Color32(0x87, 0x5f, 0x87, 0xff)},
            {97, new Color32(0x87, 0x5f, 0xaf, 0xff)},
            {98, new Color32(0x87, 0x5f, 0xd7, 0xff)},
            {99, new Color32(0x87, 0x5f, 0xff, 0xff)},
            {100, new Color32(0x87, 0x87, 0x00, 0xff)},
            {101, new Color32(0x87, 0x87, 0x5f, 0xff)},
            {102, new Color32(0x87, 0x87, 0x87, 0xff)},
            {103, new Color32(0x87, 0x87, 0xaf, 0xff)},
            {104, new Color32(0x87, 0x87, 0xd7, 0xff)},
            {105, new Color32(0x87, 0x87, 0xff, 0xff)},
            {106, new Color32(0x87, 0xaf, 0x00, 0xff)},
            {107, new Color32(0x87, 0xaf, 0x5f, 0xff)},
            {108, new Color32(0x87, 0xaf, 0x87, 0xff)},
            {109, new Color32(0x87, 0xaf, 0xaf, 0xff)},
            {110, new Color32(0x87, 0xaf, 0xd7, 0xff)},
            {111, new Color32(0x87, 0xaf, 0xff, 0xff)},
            {112, new Color32(0x87, 0xd7, 0x00, 0xff)},
            {113, new Color32(0x87, 0xd7, 0x5f, 0xff)},
            {114, new Color32(0x87, 0xd7, 0x87, 0xff)},
            {115, new Color32(0x87, 0xd7, 0xaf, 0xff)},
            {116, new Color32(0x87, 0xd7, 0xd7, 0xff)},
            {117, new Color32(0x87, 0xd7, 0xff, 0xff)},
            {118, new Color32(0x87, 0xff, 0x00, 0xff)},
            {119, new Color32(0x87, 0xff, 0x5f, 0xff)},
            {120, new Color32(0x87, 0xff, 0x87, 0xff)},
            {121, new Color32(0x87, 0xff, 0xaf, 0xff)},
            {122, new Color32(0x87, 0xff, 0xd7, 0xff)},
            {123, new Color32(0x87, 0xff, 0xff, 0xff)},
            {124, new Color32(0xaf, 0x00, 0x00, 0xff)},
            {125, new Color32(0xaf, 0x00, 0x5f, 0xff)},
            {126, new Color32(0xaf, 0x00, 0x87, 0xff)},
            {127, new Color32(0xaf, 0x00, 0xaf, 0xff)},
            {128, new Color32(0xaf, 0x00, 0xd7, 0xff)},
            {129, new Color32(0xaf, 0x00, 0xff, 0xff)},
            {130, new Color32(0xaf, 0x5f, 0x00, 0xff)},
            {131, new Color32(0xaf, 0x5f, 0x5f, 0xff)},
            {132, new Color32(0xaf, 0x5f, 0x87, 0xff)},
            {133, new Color32(0xaf, 0x5f, 0xaf, 0xff)},
            {134, new Color32(0xaf, 0x5f, 0xd7, 0xff)},
            {135, new Color32(0xaf, 0x5f, 0xff, 0xff)},
            {136, new Color32(0xaf, 0x87, 0x00, 0xff)},
            {137, new Color32(0xaf, 0x87, 0x5f, 0xff)},
            {138, new Color32(0xaf, 0x87, 0x87, 0xff)},
            {139, new Color32(0xaf, 0x87, 0xaf, 0xff)},
            {140, new Color32(0xaf, 0x87, 0xd7, 0xff)},
            {141, new Color32(0xaf, 0x87, 0xff, 0xff)},
            {142, new Color32(0xaf, 0xaf, 0x00, 0xff)},
            {143, new Color32(0xaf, 0xaf, 0x5f, 0xff)},
            {144, new Color32(0xaf, 0xaf, 0x87, 0xff)},
            {145, new Color32(0xaf, 0xaf, 0xaf, 0xff)},
            {146, new Color32(0xaf, 0xaf, 0xd7, 0xff)},
            {147, new Color32(0xaf, 0xaf, 0xff, 0xff)},
            {148, new Color32(0xaf, 0xd7, 0x00, 0xff)},
            {149, new Color32(0xaf, 0xd7, 0x5f, 0xff)},
            {150, new Color32(0xaf, 0xd7, 0x87, 0xff)},
            {151, new Color32(0xaf, 0xd7, 0xaf, 0xff)},
            {152, new Color32(0xaf, 0xd7, 0xd7, 0xff)},
            {153, new Color32(0xaf, 0xd7, 0xff, 0xff)},
            {154, new Color32(0xaf, 0xff, 0x00, 0xff)},
            {155, new Color32(0xaf, 0xff, 0x5f, 0xff)},
            {156, new Color32(0xaf, 0xff, 0x87, 0xff)},
            {157, new Color32(0xaf, 0xff, 0xaf, 0xff)},
            {158, new Color32(0xaf, 0xff, 0xd7, 0xff)},
            {159, new Color32(0xaf, 0xff, 0xff, 0xff)},
            {160, new Color32(0xd7, 0x00, 0x00, 0xff)},
            {161, new Color32(0xd7, 0x00, 0x5f, 0xff)},
            {162, new Color32(0xd7, 0x00, 0x87, 0xff)},
            {163, new Color32(0xd7, 0x00, 0xaf, 0xff)},
            {164, new Color32(0xd7, 0x00, 0xd7, 0xff)},
            {165, new Color32(0xd7, 0x00, 0xff, 0xff)},
            {166, new Color32(0xd7, 0x5f, 0x00, 0xff)},
            {167, new Color32(0xd7, 0x5f, 0x5f, 0xff)},
            {168, new Color32(0xd7, 0x5f, 0x87, 0xff)},
            {169, new Color32(0xd7, 0x5f, 0xaf, 0xff)},
            {170, new Color32(0xd7, 0x5f, 0xd7, 0xff)},
            {171, new Color32(0xd7, 0x5f, 0xff, 0xff)},
            {172, new Color32(0xd7, 0x87, 0x00, 0xff)},
            {173, new Color32(0xd7, 0x87, 0x5f, 0xff)},
            {174, new Color32(0xd7, 0x87, 0x87, 0xff)},
            {175, new Color32(0xd7, 0x87, 0xaf, 0xff)},
            {176, new Color32(0xd7, 0x87, 0xd7, 0xff)},
            {177, new Color32(0xd7, 0x87, 0xff, 0xff)},
            {178, new Color32(0xd7, 0xaf, 0x00, 0xff)},
            {179, new Color32(0xd7, 0xaf, 0x5f, 0xff)},
            {180, new Color32(0xd7, 0xaf, 0x87, 0xff)},
            {181, new Color32(0xd7, 0xaf, 0xaf, 0xff)},
            {182, new Color32(0xd7, 0xaf, 0xd7, 0xff)},
            {183, new Color32(0xd7, 0xaf, 0xff, 0xff)},
            {184, new Color32(0xd7, 0xd7, 0x00, 0xff)},
            {185, new Color32(0xd7, 0xd7, 0x5f, 0xff)},
            {186, new Color32(0xd7, 0xd7, 0x87, 0xff)},
            {187, new Color32(0xd7, 0xd7, 0xaf, 0xff)},
            {188, new Color32(0xd7, 0xd7, 0xd7, 0xff)},
            {189, new Color32(0xd7, 0xd7, 0xff, 0xff)},
            {190, new Color32(0xd7, 0xff, 0x00, 0xff)},
            {191, new Color32(0xd7, 0xff, 0x5f, 0xff)},
            {192, new Color32(0xd7, 0xff, 0x87, 0xff)},
            {193, new Color32(0xd7, 0xff, 0xaf, 0xff)},
            {194, new Color32(0xd7, 0xff, 0xd7, 0xff)},
            {195, new Color32(0xd7, 0xff, 0xff, 0xff)},
            {196, new Color32(0xff, 0x00, 0x00, 0xff)},
            {197, new Color32(0xff, 0x00, 0x5f, 0xff)},
            {198, new Color32(0xff, 0x00, 0x87, 0xff)},
            {199, new Color32(0xff, 0x00, 0xaf, 0xff)},
            {200, new Color32(0xff, 0x00, 0xd7, 0xff)},
            {201, new Color32(0xff, 0x00, 0xff, 0xff)},
            {202, new Color32(0xff, 0x5f, 0x00, 0xff)},
            {203, new Color32(0xff, 0x5f, 0x5f, 0xff)},
            {204, new Color32(0xff, 0x5f, 0x87, 0xff)},
            {205, new Color32(0xff, 0x5f, 0xaf, 0xff)},
            {206, new Color32(0xff, 0x5f, 0xd7, 0xff)},
            {207, new Color32(0xff, 0x5f, 0xff, 0xff)},
            {208, new Color32(0xff, 0x87, 0x00, 0xff)},
            {209, new Color32(0xff, 0x87, 0x5f, 0xff)},
            {210, new Color32(0xff, 0x87, 0x87, 0xff)},
            {211, new Color32(0xff, 0x87, 0xaf, 0xff)},
            {212, new Color32(0xff, 0x87, 0xd7, 0xff)},
            {213, new Color32(0xff, 0x87, 0xff, 0xff)},
            {214, new Color32(0xff, 0xaf, 0x00, 0xff)},
            {215, new Color32(0xff, 0xaf, 0x5f, 0xff)},
            {216, new Color32(0xff, 0xaf, 0x87, 0xff)},
            {217, new Color32(0xff, 0xaf, 0xaf, 0xff)},
            {218, new Color32(0xff, 0xaf, 0xd7, 0xff)},
            {219, new Color32(0xff, 0xaf, 0xff, 0xff)},
            {220, new Color32(0xff, 0xd7, 0x00, 0xff)},
            {221, new Color32(0xff, 0xd7, 0x5f, 0xff)},
            {222, new Color32(0xff, 0xd7, 0x87, 0xff)},
            {223, new Color32(0xff, 0xd7, 0xaf, 0xff)},
            {224, new Color32(0xff, 0xd7, 0xd7, 0xff)},
            {225, new Color32(0xff, 0xd7, 0xff, 0xff)},
            {226, new Color32(0xff, 0xff, 0x00, 0xff)},
            {227, new Color32(0xff, 0xff, 0x5f, 0xff)},
            {228, new Color32(0xff, 0xff, 0x87, 0xff)},
            {229, new Color32(0xff, 0xff, 0xaf, 0xff)},
            {230, new Color32(0xff, 0xff, 0xd7, 0xff)},
            {231, new Color32(0xff, 0xff, 0xff, 0xff)},
            {232, new Color32(0x08, 0x08, 0x08, 0xff)},
            {233, new Color32(0x12, 0x12, 0x12, 0xff)},
            {234, new Color32(0x1c, 0x1c, 0x1c, 0xff)},
            {235, new Color32(0x26, 0x26, 0x26, 0xff)},
            {236, new Color32(0x30, 0x30, 0x30, 0xff)},
            {237, new Color32(0x3a, 0x3a, 0x3a, 0xff)},
            {238, new Color32(0x44, 0x44, 0x44, 0xff)},
            {239, new Color32(0x4e, 0x4e, 0x4e, 0xff)},
            {240, new Color32(0x58, 0x58, 0x58, 0xff)},
            {241, new Color32(0x62, 0x62, 0x62, 0xff)},
            {242, new Color32(0x6c, 0x6c, 0x6c, 0xff)},
            {243, new Color32(0x76, 0x76, 0x76, 0xff)},
            {244, new Color32(0x80, 0x80, 0x80, 0xff)},
            {245, new Color32(0x8a, 0x8a, 0x8a, 0xff)},
            {246, new Color32(0x94, 0x94, 0x94, 0xff)},
            {247, new Color32(0x9e, 0x9e, 0x9e, 0xff)},
            {248, new Color32(0xa8, 0xa8, 0xa8, 0xff)},
            {249, new Color32(0xb2, 0xb2, 0xb2, 0xff)},
            {250, new Color32(0xbc, 0xbc, 0xbc, 0xff)},
            {251, new Color32(0xc6, 0xc6, 0xc6, 0xff)},
            {252, new Color32(0xd0, 0xd0, 0xd0, 0xff)},
            {253, new Color32(0xda, 0xda, 0xda, 0xff)},
            {254, new Color32(0xe4, 0xe4, 0xe4, 0xff)},
            {255, new Color32(0xee, 0xee, 0xee, 0xff)}
        };

        public static Color? Handle_3or4Bit_ForegroundColor(string str)
        {
            if (!str.StartsWith("[")) return null;
            if (!str.EndsWith("m")) return null;
            if (str.Length < 3 || 4 < str.Length) return null;
            int val = int.Parse(str.Replace("[", "").Replace("m", ""));
            if (dict3or4bitforeground.ContainsKey(val)) return dict3or4bitforeground[val];

            return null;
        }

        public static Color? Handle_8Bit_ForegroundColor(string str)
        {
            if (!str.StartsWith("[38;5;")) return null;
            if (!str.EndsWith("m")) return null;
            if (str.Length < 8 || 10 < str.Length) return null;
            int val = int.Parse(str.Replace("[38;5;", "").Replace("m", ""));
            if (dict8bitforeground.ContainsKey(val)) return dict8bitforeground[val];

            return null;
        }

        private static Color AddColor(Color colora, Color colorb)
        {
            var r = Math.Max(0.0f, Math.Min(colora.r + colorb.r, 1.0f));
            var g = Math.Max(0.0f, Math.Min(colora.g + colorb.g, 1.0f));
            var b = Math.Max(0.0f, Math.Min(colora.b + colorb.b, 1.0f));
            return new Color(r, g, b);
        }
    }
}
#endif